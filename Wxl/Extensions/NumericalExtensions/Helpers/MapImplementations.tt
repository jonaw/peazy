<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
	string[] types = new []
	{
		"decimal",
		"double",
		"float"
	};
#>
/*******************************************************************************
*                                                                              *
*                            THIS FILE IS GENERATED                            *
*                                                                              *
*******************************************************************************/
using System;

namespace Wxl.Extensions.NumericalExtensions.Helpers
{
	internal static class MapImplementations
	{
		<#
		foreach (var type in types)
		{
		#>

		internal static <#= type #> MapImpl(<#= type #> value, <#= type #> sourceMin, <#= type #> sourceMax, <#= type #> targetMin, <#= type #> targetMax)
        {
            var exception = MapImplArgumentCheck(value, sourceMin, sourceMax, targetMin, targetMax);
            if (exception != null)
            {
                throw exception;
            }

            var result = targetMin + ((targetMax - targetMin) / (sourceMax - sourceMin)) * (value - sourceMin);

            return result;
        }

		internal static Exception MapImplArgumentCheck(<#= type #> value, <#= type #> sourceMin, <#= type #> sourceMax, <#= type #> targetMin, <#= type #> targetMax)
		{
			var exception = default(Exception);

			if (value < sourceMin || value > sourceMax)
			{
				exception = new ArgumentException($"{nameof(value)} must not be less than {nameof(sourceMin)} or greater than {nameof(sourceMax)}");
			}
			else if (sourceMin > sourceMax)
			{
				exception = new ArgumentException($"{nameof(value)} must not be less than {nameof(sourceMin)} or greater than {nameof(sourceMax)}");
			}
			else if (targetMin > targetMax)
			{
				exception = new ArgumentException($"{nameof(targetMin)} must not be greater than {nameof(targetMax)}");
			}

			return exception;
		}
		<#
		}
		#>

	}
}