<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    Dictionary<string, string> integerExtensionTypes = new Dictionary<string, string>
    {
        { "ulong", "ToUInt64"},
        { "long", "ToInt64"},

        { "uint", "ToUInt32"},
        { "int", "ToInt32"},

        { "ushort", "ToUInt16"},
        { "short", "ToInt16"},

        { "sbyte", "ToSByte"},
        { "byte", "ToByte"},
    };
#>
/*******************************************************************************
*                                                                              *
*                            THIS FILE IS GENERATED                            *
*                                                                              *
*******************************************************************************/
using System;
using Peazy.Core;

namespace Peazy.Extensions
{
    public static partial class MapExtensions
    {
        <# // ****************************************************************** #>
        <# // *                                                                * #>
        <# // *          Create map implementations for integer types          * #>
        <# // *                                                                * #>
        <# // ****************************************************************** #>
<#
foreach (var typename in integerExtensionTypes)
{
    var type = typename.Key;
    var converter = typename.Value;
#>
        /// <summary>
        /// Map a value from one range to another. Utilizes <see cref="MidpointRounding.ToEven"/> when rounding mapped value to integer
        /// </summary>
        /// <param name="value">Value to map</param>
        /// <param name="sourceMin">Source range minimum value</param>
        /// <param name="sourceMax">Source range maximum value</param>
        /// <param name="targetMin">Target range minimum value</param>
        /// <param name="targetMax">Target range maximum value</param>
        /// <returns>Returns the mapped value</returns>
        public static <#= type #> Map(this <#= type #> value, <#= type #> sourceMin, <#= type #> sourceMax, <#= type #> targetMin, <#= type #> targetMax)
            => value.Map(sourceMin, sourceMax, targetMin, targetMax, MidpointRounding.ToEven);

        /// <summary>
        /// Map a value from one range to another
        /// </summary>
        /// <param name="value">Value to map</param>
        /// <param name="sourceMin">Source range minimum value</param>
        /// <param name="sourceMax">Source range maximum value</param>
        /// <param name="targetMin">Target range minimum value</param>
        /// <param name="targetMax">Target range maximum value</param>
        /// <param name="roundingMode">Rounding mode</param>
        /// <returns>Returns the mapped value</returns>
        public static <#= type #> Map(this <#= type #> value, <#= type #> sourceMin, <#= type #> sourceMax, <#= type #> targetMin, <#= type #> targetMax, MidpointRounding roundingMode)
            => MapCore(value, sourceMin, sourceMax, targetMin, targetMax, roundingMode);

        private static <#= type #> MapCore(<#= type #> value, <#= type #> sourceMin, <#= type #> sourceMax, <#= type #> targetMin, <#= type #> targetMax, MidpointRounding roundingMode)
        {
            var mappedAndRoundedValue = MapAndRoundCore(value, sourceMin, sourceMax, targetMin, targetMax, roundingMode);
            return Convert.<#= converter #>(mappedAndRoundedValue);
        }

<#
}
#>
        // Helper for map extensions
        private static decimal MapAndRoundCore(decimal value, decimal sourceMin, decimal sourceMax, decimal targetMin, decimal targetMax, MidpointRounding roundingMode)
        {
            var mappedValue = NumericHelpers.Map(value, sourceMin, sourceMax, targetMin, targetMax);
            return Math.Round(mappedValue, roundingMode);
        }
    }
}